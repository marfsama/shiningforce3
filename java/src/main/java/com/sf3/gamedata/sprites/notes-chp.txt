0x0000
0x04e6 - 0000 0100 1110 0110
0x7d7f - 0111 1101 0111 1111
         11 empty pixels (13 = 0D 1101, 12 = 0C 1100, 11= 0B 1011, 10 = 0A 1010, 9 = 1001)
          1 0x7fff
0x9511 - copy pixel 1
0x8d16 - copy pixel 2
0x9179 - copy pixel 3
0x8d14 - copy pixel 4
0x9117 - copy pixel 5
0x8d17 - copy pixel 6
0x8d36 - copy pixel 7
0x9577 - copy pixel 8

0x7d ()
0x9136
0x9134
0x7f
0x7d7f
0x9532
0x95bc95db
0x088cf78c

commands:
  e6 00 - 1110 0110 0000 0000
  0f 50 - 0000 1111 0101 0000


cbf02 - 13 empty pixels ()
         8 copy pixels
         1 empty pixel
         2 ... pixels

05C52D00
 0    1     2    3   4    5    6    7    8    9    a    b     c
0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 7FFF 9511 8D16 9179 8D14 9117 8D17 8D36 9577 0000 9136 9134 7FFF 0000000000000000000000000000000000000000000000000000000000000000
0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 7FFF 9532 95BC 95DB 9136 8CF7 8CD6 917A 95BC 99FE 9177 959A 9155 95BA 91577FFF00000000000000000000000000000000000000000000000000000000


7f => eject 7fff

----------
cbf14

expected colors
1x 7fff
38 x 0000 (38 = 0x26, 10 0110 (bit length 6))
1x 7fff
1x 7fff
38 x 0000
1x 7fff
1x 7fff
38 x 0000
1x 7fff

data:
0x7f7d7f7d
0x7f7d7f7d
0x7f7d7f7d
0x7f7d7f7d


commands:
9f 13 1f 13 - 1.0.0-1.1111_0.001_00-11_0001 1111 1111 0001
 - color: stack element 7f (0x7fff)
 - 1 run length
 - 0 bitlength of count is 0+1
 - 0 count is (1)0
 --
 - color: stack element 7d (0x0000)
 - 1 run length
 - 11110 bitlength of count is 4 + 1 = 5
 - 00100 count is (1)00100 = 100100 = 36
 --
 - color: stack element 7f (0x7fff)

1f 13 1f 13 -
1f 13 1f 13 -

while (true) {
  fetch byte
    when msb is 0, this is a stack reference
    when msb is 1,
       fetch the next byte and interpret both bytes as a color
       add color to stack, rotate stack to position 3 when full (0x7f)
    note: colors in Saturn always have msb (bit 15) set to 1. When all bits are zero (including msb), then the
          pixel is transparent. This alghorithm has the transparent pixel in the stack position 2

    fetch command bit
       bit is 0 (single color): copy color to output and start at the top of the loop
       bit is 1 (run length):
         grab '1' bits until encountering a zero '0'. The number of bits (including zero)
           is the number of bits to read for the count
         grab number of bits calculated in previous step. Add a '1' before the first digit.
           write the color 'count' times to the output buffer
}


chf02:
* second block starts at 0x4830

